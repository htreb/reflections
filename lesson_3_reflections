when would you want to create a remote repository rather than keeping all your work local?

a remote repository is useful when working in a team you can work with people down the hall or the otherside of the world away and we can ll sahre the same working can commits.

 


 
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

choosing when to manaully push or pull commits is best when working on projects in a team you can work on you wn sections to see whether you are happy with them before choosing to push them to rmeote origin similarly you may want to stick to your own work before pull in the remote files into your own computer. if you do it manually then you get to choose when that happens.





Describe the differences between forks, clones, and branches. When would you use one instead of another?

a fork is only used on GitHUB on the website. it is used to clone a repository (which you may not have authority to change) to your own rirectory, then you can make changes yourself which will not affect the original.
a clone is a copy of a repository, you can clone one from github onto your local computer, or you can clone one locally to locally.
a branch can be both on github or locally, it is a copy of the repository at the time so you can work alongside and then merge later.





What is the benefit of having a copy of the last known state of the remote stored locally?

if you have the last known state stored locally is usually under origin/master, if you continue to work locally (and others update the reopsitory online) then when you pull the repository again they will be about of sinc. You will get the message when you run git status that you are ahead of the main branch or something along those lines and you need to push your changes. to get back into sinc you can either fetch the repository and then merge the branch (the will both branch out of the previous 'last known state or common ancestor or origin/master') or you can pull and it will try to do both the fetching and ghe merging.





How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

collaborating would be much harder youd need to work in the same room at the same time with people on the same file. if you were worked on different files then merging would be very time consuming as you wouldn't know what had changed. you wouldn't have all the previous commits to look though and you wouldn't have branches or pull requests either.





When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Making changes in different branches is a bit of pain as you need to make pull requests and merge conflicts, you might need to pull the branch to you local computer then merge it and then push it back up again. but this is useful when collborating to make sure that conflicts do not arrise and can be resolved before being merged into the master branch. this keeps the master branch working. if i was working on my own I would use just the master branch unless I was going to try something experimental which I might or might not want to merge in later.